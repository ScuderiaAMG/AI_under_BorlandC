
#include<huatu1.h>
#include<Bezier.h>
#include<draw.h>
#include<stdio.h>
#include<string.h>
#include<alloc.h>
#include<stdlib.h>
#include<color.h>
#include<graphics.h>
#include<stdarg.h>
#include<conio.h>
#include<Bezier.h>
#include<xiezi.h>
#include<dos.h>
#include<stddef.h>
#include<mouse.h>
#include<dog.h>
#include<boy.h>

//上：145 
//下：581
//左：0
//右：1024 

void mountain(int x,int y,float k,int color,int page)
{
	int i=0;

	x=x-1;
	y=y-343;
		
	int x0[49];
	int y0[49];
	
	int x1[56];
	int y1[56];
	
	int x2[29];
	int y2[29];
	
	int x3[26];
	int y3[26];
	
	x=x-1;
	y=y-343;
	
	x0[0]=k*(x+1);
	y0[0]=k*(y+343);
	
	x0[1]=k*(x+12);
	y0[1]=k*(y+309);
	
	x0[2]=k*(x+18);
	y0[2]=k*(y+297);
	
	x0[3]=k*(x+31);
	y0[3]=k*(y+280);
	
	x0[4]=k*(x+42);
	y0[4]=k*(y+267);
	
	x0[5]=k*(x+50);
	y0[5]=k*(y+259);
	
	x0[6]=k*(x+66);
	y0[6]=k*(y+244);
	
	x0[7]=k*(x+83);
	y0[7]=k*(y+236);
	
	x0[8]=k*(x+93);
	y0[8]=k*(y+233);
	
	x0[9]=k*(x+112);
	y0[9]=k*(y+228);
	
	x0[10]=k*(x+137);
	y0[10]=k*(y+232);
	
	x0[11]=k*(x+147);
	y0[11]=k*(y+240);
	
	x0[12]=k*(x+158);
	y0[12]=k*(y+251);
	
	x0[13]=k*(x+166);
	y0[13]=k*(y+253);
	
	x0[14]=k*(x+173);
	y0[14]=k*(y+255);
	
	x0[15]=k*(x+175);
	y0[15]=k*(y+263);
	
	x0[16]=k*(x+178);
	y0[16]=k*(y+270);
	
	x0[17]=k*(x+179);
	y0[17]=k*(y+273);
	
	x0[18]=k*(x+180);
	y0[18]=k*(y+279);
	
	x0[19]=k*(x+186);
	y0[19]=k*(y+289);
	
	x0[20]=k*(x+191);
	y0[20]=k*(y+303);
	
	x0[21]=k*(x+194);
	y0[21]=k*(y+329);
	
	x0[22]=k*(x+204);
	y0[22]=k*(y+348);
	
	x0[23]=k*(x+206);
	y0[23]=k*(y+365);
	
	x0[24]=k*(x+210);
	y0[24]=k*(y+376);
	
	x0[25]=k*(x+214);
	y0[25]=k*(y+384);
	
	x0[26]=k*(x+220);
	y0[26]=k*(y+392);
	
	x0[27]=k*(x+229);
	y0[27]=k*(y+400);
	
	x0[28]=k*(x+237);
	y0[28]=k*(y+407);
	
	x0[29]=k*(x+243);
	y0[29]=k*(y+410);
	
	x0[30]=k*(x+250);
	y0[30]=k*(y+414);
	
	x0[31]=k*(x+259);
	y0[31]=k*(y+422);
	
	x0[32]=k*(x+269);
	y0[32]=k*(y+427);
	
	x0[33]=k*(x+279);
	y0[33]=k*(y+433);
	
	x0[34]=k*(x+288);
	y0[34]=k*(y+442);
	
	x0[35]=k*(x+297);
	y0[35]=k*(y+447);
	
	x0[36]=k*(x+305);
	y0[36]=k*(y+455);
	
	x0[37]=k*(x+311);
	y0[37]=k*(y+465);
	
	x0[38]=k*(x+314);
	y0[38]=k*(y+472);
	
	x0[39]=k*(x+316);
	y0[39]=k*(y+478);
	
	x0[40]=k*(x+319);
	y0[40]=k*(y+483);
	
	x0[41]=k*(x+326);
	y0[41]=k*(y+491);
	
	x0[42]=k*(x+331);
	y0[42]=k*(y+506);
	
	x0[43]=k*(x+336);
	y0[43]=k*(y+518);
	
	x0[44]=k*(x+339);
	y0[44]=k*(y+528);
	
	x0[45]=k*(x+347);
	y0[45]=k*(y+537);
	
	x0[46]=k*(x+353);
	y0[46]=k*(y+552);
	
	x0[47]=k*(x+359);
	y0[47]=k*(y+568);
	
	x0[48]=k*(x+381);
	y0[48]=k*(y+584);
	
 	//把初始顶点复原
 	for(i=0;i<49;i++)
 	{
 		x0[i]=x0[i]-(x+1)*(k-1);
 		y0[i]=y0[i]-(y+343)*(k-1);
 	}	

    Bezier(color,49,page,x0,y0,0);
	
	x1[0]=k*(x+235);
	y1[0]=k*(y+405);
	
	x1[1]=k*(x+245);
	y1[1]=k*(y+377);
	
	x1[2]=k*(x+250);
	y1[2]=k*(y+368);
	
	x1[3]=k*(x+256);
	y1[3]=k*(y+355);
	
	x1[4]=k*(x+270);
	y1[4]=k*(y+337);
	
	x1[5]=k*(x+283);
	y1[5]=k*(y+321);
	
	x1[6]=k*(x+292);
	y1[6]=k*(y+312);
	
	x1[7]=k*(x+304);
	y1[7]=k*(y+301);
	
	x1[8]=k*(x+315);
	y1[8]=k*(y+296);
	
	x1[9]=k*(x+331);
	y1[9]=k*(y+282);
	
	x1[10]=k*(x+344);
	y1[10]=k*(y+274);
	
	x1[11]=k*(x+359);
	y1[11]=k*(y+255);
	
	x1[12]=k*(x+366);
	y1[12]=k*(y+243);
	
	x1[13]=k*(x+372);
	y1[13]=k*(y+227);
	
	x1[14]=k*(x+376);
	y1[14]=k*(y+211);
	
	x1[15]=k*(x+381);
	y1[15]=k*(y+201);
	
	x1[16]=k*(x+394);
	y1[16]=k*(y+176);
	
	x1[17]=k*(x+404);
	y1[17]=k*(y+169);
	
	x1[18]=k*(x+411);
	y1[18]=k*(y+164);
	
	x1[19]=k*(x+418);
	y1[19]=k*(y+160);
	
	x1[20]=k*(x+421);
	y1[20]=k*(y+162);
	
	x1[21]=k*(x+433);
	y1[21]=k*(y+158);
	
	x1[22]=k*(x+441);
	y1[22]=k*(y+161);
	
	x1[23]=k*(x+451);
	y1[23]=k*(y+165);
	
	x1[24]=k*(x+458);
	y1[24]=k*(y+169);
	
	x1[25]=k*(x+465);
	y1[25]=k*(y+178);
	
	x1[26]=k*(x+471);
	y1[26]=k*(y+182);
	
	x1[27]=k*(x+481);
	y1[27]=k*(y+185);
	
	x1[28]=k*(x+486);
	y1[28]=k*(y+195);
	
	x1[29]=k*(x+492);
	y1[29]=k*(y+208);
	
	x1[30]=k*(x+495);
	y1[30]=k*(y+224);
	
	x1[31]=k*(x+500);
	y1[31]=k*(y+233);
	
	x1[32]=k*(x+506);
	y1[32]=k*(y+251);
	
	x1[33]=k*(x+508);
	y1[33]=k*(y+268);
	
	x1[34]=k*(x+511);
	y1[34]=k*(y+277);
	
	x1[35]=k*(x+518);
	y1[35]=k*(y+290);
	
	x1[36]=k*(x+526);
	y1[36]=k*(y+300);
	
	x1[37]=k*(x+543);
	y1[37]=k*(y+302);
	
	x1[38]=k*(x+562);
	y1[38]=k*(y+303);
	
	x1[39]=k*(x+574);
	y1[39]=k*(y+292);
	
	x1[40]=k*(x+580);
	y1[40]=k*(y+277);
	
	x1[41]=k*(x+583);
	y1[41]=k*(y+263);
	
	x1[42]=k*(x+592);
	y1[42]=k*(y+241);
	
	x1[43]=k*(x+603);
	y1[43]=k*(y+229);
	
	x1[44]=k*(x+613);
	y1[44]=k*(y+227);
	
	x1[45]=k*(x+621);
	y1[45]=k*(y+232);
	
	x1[46]=k*(x+629);
	y1[46]=k*(y+239);
	
	x1[47]=k*(x+637);
	y1[47]=k*(y+256);
	
	x1[48]=k*(x+653);
	y1[48]=k*(y+271);
	
	x1[49]=k*(x+668);
	y1[49]=k*(y+285);
	
	x1[50]=k*(x+683);
	y1[50]=k*(y+301);
	
	x1[51]=k*(x+704);
	y1[51]=k*(y+322);
	
	x1[52]=k*(x+707);
	y1[52]=k*(y+328);
	
	x1[53]=k*(x+718);
	y1[53]=k*(y+330);
	
	x1[54]=k*(x+728);
	y1[54]=k*(y+334);
	
	x1[55]=k*(x+738);
	y1[55]=k*(y+339);

 	//把初始顶点复原
 	for(i=0;i<56;i++)
 	{
 		x1[i]=x1[i]-(x+1)*(k-1);
 		y1[i]=y1[i]-(y+343)*(k-1);
 	}
	
	Bezier(color,56,page,x1,y1,0);
	
	x2[0]=k*(x+688);
	y2[0]=k*(y+501);
	
	x2[1]=k*(x+699);
	y2[1]=k*(y+467);
	
	x2[2]=k*(x+701);
	y2[2]=k*(y+438);
	
	x2[3]=k*(x+715);
	y2[3]=k*(y+404);
	
	x2[4]=k*(x+723);
	y2[4]=k*(y+383);
	
	x2[5]=k*(x+731);
	y2[5]=k*(y+360);
	
	x2[6]=k*(x+740);
	y2[6]=k*(y+340);
	
	x2[7]=k*(x+758);
	y2[7]=k*(y+325);
	
	x2[8]=k*(x+779);
	y2[8]=k*(y+320);
	
	x2[9]=k*(x+777);
	y2[9]=k*(y+307);
	
	x2[10]=k*(x+785);
	y2[10]=k*(y+289);
	
	x2[11]=k*(x+794);
	y2[11]=k*(y+269);
	
	x2[12]=k*(x+798);
	y2[12]=k*(y+259);
	
	x2[13]=k*(x+800);
	y2[13]=k*(y+219);
	
	x2[14]=k*(x+800);
	y2[14]=k*(y+182);
	
	x2[15]=k*(x+811);
	y2[15]=k*(y+158);
	
	x2[16]=k*(x+825);
	y2[16]=k*(y+153);
	
	x2[17]=k*(x+843);
	y2[17]=k*(y+145);
	
	x2[18]=k*(x+857);
	y2[18]=k*(y+150);
	
	x2[19]=k*(x+866);
	y2[19]=k*(y+162);
	
	x2[20]=k*(x+871);
	y2[20]=k*(y+168);
	
	x2[21]=k*(x+883);
	y2[21]=k*(y+176);
	
	x2[22]=k*(x+893);
	y2[22]=k*(y+192);
	
	x2[23]=k*(x+898);
	y2[23]=k*(y+202);
	
	x2[24]=k*(x+900);
	y2[24]=k*(y+213);
	
	x2[25]=k*(x+905);
	y2[25]=k*(y+229);
	
	x2[26]=k*(x+913);
	y2[26]=k*(y+248);
	
	x2[27]=k*(x+920);
	y2[27]=k*(y+260);
	
	x2[28]=k*(x+924);
	y2[28]=k*(y+272);
	
 	//把初始顶点复原
 	for(i=0;i<29;i++)
 	{
 		x2[i]=x2[i]-(x+1)*(k-1);
 		y2[i]=y2[i]-(y+343)*(k-1);
 	}	
	Bezier(color,29,page,x2,y2,0);
	x3[0]=k*(x+806);
	y3[0]=k*(y+521);
	
	x3[1]=k*(x+813);
	y3[1]=k*(y+501);
	
	x3[2]=k*(x+822);
	y3[2]=k*(y+474);
	
	x3[3]=k*(x+829);
	y3[3]=k*(y+450);
	
	x3[4]=k*(x+838);
	y3[4]=k*(y+441);
	
	x3[5]=k*(x+850);
	y3[5]=k*(y+436);
	
	x3[6]=k*(x+863);
	y3[6]=k*(y+429);
	
	x3[7]=k*(x+883);
	y3[7]=k*(y+414);
	
	x3[8]=k*(x+892);
	y3[8]=k*(y+394);
	
	x3[9]=k*(x+896);
	y3[9]=k*(y+376);
	
	x3[10]=k*(x+897);
	y3[10]=k*(y+359);
	
	x3[11]=k*(x+893);
	y3[11]=k*(y+343);
	
	x3[12]=k*(x+902);
	y3[12]=k*(y+326);
	
	x3[13]=k*(x+910);
	y3[13]=k*(y+294);
	
	x3[14]=k*(x+918);
	y3[14]=k*(y+277);
	
	x3[15]=k*(x+931);
	y3[15]=k*(y+269);
	
	x3[16]=k*(x+939);
	y3[16]=k*(y+252);
	
	x3[17]=k*(x+955);
	y3[17]=k*(y+244);
	
	x3[18]=k*(x+966);
	y3[18]=k*(y+262);
	
	x3[19]=k*(x+971);
	y3[19]=k*(y+285);
	
	x3[20]=k*(x+971);
	y3[20]=k*(y+302);
	
	x3[21]=k*(x+979);
	y3[21]=k*(x+317);
	
	x3[22]=k*(x+989);
	y3[22]=k*(y+336);
	
	x3[23]=k*(x+991);
	y3[23]=k*(y+359);
	
	x3[24]=k*(x+1000);
	y3[24]=k*(y+378);
	
	x3[25]=k*(x+1013);
	y3[25]=k*(y+412); 
 
 	//把初始顶点复原
 	for(i=0;i<26;i++)
 	{
 		x3[i]=x3[i]-(x+1)*(k-1);
 		y3[i]=y3[i]-(y+343)*(k-1);
 	}	
	
	Bezier(color,26,page,x3,y3,0);
}


//上：39 
//下：125
//左：186
//右：302 
void cloud(int x,int y,float k,int color,int page)
{
		int i=0;
	
		x=x-1;
		y=y-343;
		
		int x0[65];
		int y0[65];
		

		
		x0[0]=k*(x+215);
		y0[0]=k*(y+61);
		
		x0[1]=k*(x+217);
		y0[1]=k*(y+55);
		
		x0[2]=k*(x+218);
		y0[2]=k*(y+51);
		
		x0[3]=k*(x+221);
		y0[3]=k*(y+46);
		
		x0[4]=k*(x+225);
		y0[4]=k*(y+44);
		
		x0[5]=k*(x+230);
		y0[5]=k*(y+42);
		
		x0[6]=k*(x+236);
		y0[6]=k*(y+41);
		
		x0[7]=k*(x+240);
		y0[7]=k*(y+39);
		
		x0[8]=k*(x+245);
		y0[8]=k*(y+41);
		
		x0[9]=k*(x+252);
		y0[9]=k*(y+41);
		
		x0[10]=k*(x+256);
		y0[10]=k*(y+42);
		
		x0[11]=k*(x+260);
		y0[11]=k*(y+44);
		
		x0[12]=k*(x+263);
		y0[12]=k*(y+46);
		
		x0[13]=k*(x+266);
		y0[13]=k*(y+49);
		
		x0[14]=k*(x+267);
		y0[14]=k*(y+51);
		
		x0[15]=k*(x+270);
		y0[15]=k*(y+57);
		
		x0[16]=k*(x+276);
		y0[16]=k*(y+56);
		
		x0[17]=k*(x+281);
		y0[17]=k*(y+58);
		
		x0[18]=k*(x+287);
		y0[18]=k*(y+58);
		
		x0[19]=k*(x+292);
		y0[19]=k*(y+65);
		
		x0[20]=k*(x+295);
		y0[20]=k*(y+69);
		
		x0[21]=k*(x+298);
		y0[21]=k*(y+71);
		
		x0[22]=k*(x+300);
		y0[22]=k*(y+79);
		
		x0[23]=k*(x+301);
		y0[23]=k*(y+84);
		
		x0[24]=k*(x+298);
		y0[24]=k*(y+88);
		
		x0[25]=k*(x+294);
		y0[25]=k*(y+93);
		
		x0[26]=k*(x+291);
		y0[26]=k*(y+95);
		
		x0[27]=k*(x+289);
		y0[27]=k*(y+98);
		
		x0[28]=k*(x+290);
		y0[28]=k*(y+102);
		
		x0[29]=k*(x+295);
		y0[29]=k*(y+106);
		
		x0[30]=k*(x+294);
		y0[30]=k*(y+113);
		
		x0[31]=k*(x+292);
		y0[31]=k*(y+117);
		
		x0[32]=k*(x+287);
		y0[32]=k*(y+120);
		
		x0[33]=k*(x+283);
		y0[33]=k*(y+120);
		
		x0[34]=k*(x+277);
		y0[34]=k*(y+118);
		
		x0[35]=k*(x+275);
		y0[35]=k*(y+121);
		
		x0[36]=k*(x+267);
		y0[36]=k*(y+119);
		
		x0[37]=k*(x+259);
		y0[37]=k*(y+123);
		
		x0[38]=k*(x+253);
		y0[38]=k*(y+120);
		
		x0[39]=k*(x+247);
		y0[39]=k*(y+123);
		
		x0[40]=k*(x+243);
		y0[40]=k*(y+118);
		
		x0[41]=k*(x+241);
		y0[41]=k*(y+113);
		
		x0[42]=k*(x+236);
		y0[42]=k*(y+114);
		
		x0[43]=k*(x+232);
		y0[43]=k*(y+116);
		
		x0[44]=k*(x+226);
		y0[44]=k*(y+118);
		
		x0[45]=k*(x+220);
		y0[45]=k*(y+119);
		
		x0[46]=k*(x+216);
		y0[46]=k*(y+121);
		
		x0[47]=k*(x+211);
		y0[47]=k*(y+122);
		
		x0[48]=k*(x+206);
		y0[48]=k*(y+124);
		
		x0[49]=k*(x+202);
		y0[49]=k*(y+120);
		
		x0[50]=k*(x+199);
		y0[50]=k*(y+115);
		
		x0[51]=k*(x+195);
		y0[51]=k*(y+107);
		
		x0[52]=k*(x+194);
		y0[52]=k*(y+100);
		
		x0[53]=k*(x+194);
		y0[53]=k*(y+95);
		
		x0[54]=k*(x+188);
		y0[54]=k*(y+89);
		
		x0[55]=k*(x+186);
		y0[55]=k*(y+83);
		
		x0[56]=k*(x+185);
		y0[56]=k*(y+80);
		
		x0[57]=k*(x+187);
		y0[57]=k*(y+74);
		
		x0[58]=k*(x+188);
		y0[58]=k*(y+70);
		
		x0[59]=k*(x+191);
		y0[59]=k*(y+69);
		
		x0[60]=k*(x+197);
		y0[60]=k*(y+68);
		
		x0[61]=k*(x+201);
		y0[61]=k*(y+65);
		
		x0[62]=k*(x+207);
		y0[62]=k*(y+64);
		
		x0[63]=k*(x+212);
		y0[63]=k*(y+63);
		
		x0[64]=k*(x+215);
		y0[64]=k*(y+64); 
		
	 	//把初始顶点复原
	 	for(i=0;i<65;i++)
	 	{
	 		x0[i]=x0[i]-(x+1)*(k-1);
	 		y0[i]=y0[i]-(y+343)*(k-1);
	 	}	
		
		Bezier(color,65,page,x0,y0,0);	
}

//上：653
//下：697
//左：214
//右：620 
void water(int x,int y,float k,int color,int page)
{
	int i=0;

	x=x-1;
	y=y-343;
		
	int x0[66];
	int y0[66];
	
	x0[0]=k*(x+223);
	y0[0]=k*(y+688);
	
	x0[1]=k*(x+227);
	y0[1]=k*(y+682);
	
	x0[2]=k*(x+229);
	y0[2]=k*(y+675);
	
	x0[3]=k*(x+232);
	y0[3]=k*(y+669);
	
	x0[4]=k*(x+238);
	y0[4]=k*(y+667);
	
	x0[5]=k*(x+248);
	y0[5]=k*(y+672);
	
	x0[6]=k*(x+253);
	y0[6]=k*(y+675);
	
	x0[7]=k*(x+256);
	y0[7]=k*(y+681);
	
	x0[8]=k*(x+260);
	y0[8]=k*(y+687);
	
	x0[9]=k*(x+265);
	y0[9]=k*(y+690);
	
	x0[10]=k*(x+270);
	y0[10]=k*(y+690);
	
	x0[11]=k*(x+275);
	y0[11]=k*(y+688);
	
	x0[12]=k*(x+281);
	y0[12]=k*(y+684);
	
	x0[13]=k*(x+283);
	y0[13]=k*(y+681);
	
	x0[14]=k*(x+285);
	y0[14]=k*(y+677);
	
	x0[15]=k*(x+287);
	y0[15]=k*(y+671);
	
	x0[16]=k*(x+292);
	y0[16]=k*(y+667);
	
	x0[17]=k*(x+296);
	y0[17]=k*(y+666);
	
	x0[18]=k*(x+303);
	y0[18]=k*(y+667);
	
	x0[19]=k*(x+306);
	y0[19]=k*(y+671);
	
	x0[20]=k*(x+309);
	y0[20]=k*(y+676);
	
	x0[21]=k*(x+310);
	y0[21]=k*(y+684);
	
	x0[22]=k*(x+312);
	y0[22]=k*(y+690);
	
	x0[23]=k*(x+320);
	y0[23]=k*(y+695);
	
	x0[24]=k*(x+328);
	y0[24]=k*(y+693);
	
	x0[25]=k*(x+333);
	y0[25]=k*(y+691);
	
	x0[26]=k*(x+337);
	y0[26]=k*(y+686);
	
	x0[27]=k*(x+340);
	y0[27]=k*(y+681);
	
	x0[28]=k*(x+343);
	y0[28]=k*(y+674);
	
	x0[29]=k*(x+347);
	y0[29]=k*(y+669);
	
	x0[30]=k*(x+351);
	y0[30]=k*(y+664);
	
	x0[31]=k*(x+389);
	y0[31]=k*(y+682);
	
	x0[32]=k*(x+399);
	y0[32]=k*(y+678);
	
	x0[33]=k*(x+406);
	y0[33]=k*(y+670);
	
	x0[34]=k*(x+415);
	y0[34]=k*(y+663);
	
	x0[35]=k*(x+422);
	y0[35]=k*(y+661);
	
	x0[36]=k*(x+427);
	y0[36]=k*(y+660);
	
	x0[37]=k*(x+434);
	y0[37]=k*(y+660);
	
	x0[38]=k*(x+448);
	y0[38]=k*(y+668);
	
	x0[39]=k*(x+451);
	y0[39]=k*(y+673);
	
	x0[40]=k*(x+458);
	y0[40]=k*(y+681);
	
	x0[41]=k*(x+465);
	y0[41]=k*(y+687);
	
	x0[42]=k*(x+471);
	y0[42]=k*(y+686);
	
	x0[43]=k*(x+479);
	y0[43]=k*(y+682);
	
	x0[44]=k*(x+484);
	y0[44]=k*(y+678);
	
	x0[45]=k*(x+493);
	y0[45]=k*(y+671);
	
	x0[46]=k*(x+496);
	y0[46]=k*(y+664);
	
	x0[47]=k*(x+501);
	y0[47]=k*(y+658);
	
	x0[48]=k*(x+511);
	y0[48]=k*(y+653);
	
	x0[49]=k*(x+518);
	y0[49]=k*(y+651);
	
	x0[50]=k*(x+524);
	y0[50]=k*(y+650);
	
	x0[51]=k*(x+529);
	y0[51]=k*(y+653);
	 
	x0[52]=k*(x+533);
	y0[52]=k*(y+656);
	
	x0[53]=k*(x+539);
	y0[53]=k*(y+662);
	
	x0[54]=k*(x+541);
	y0[54]=k*(y+669);
	
	x0[55]=k*(x+547);
	y0[55]=k*(y+676);
	
	x0[56]=k*(x+560);
	y0[56]=k*(y+675);
	
	x0[57]=k*(x+565);
	y0[57]=k*(y+674);
	
	x0[58]=k*(x+571);
	y0[58]=k*(y+670);
	
	x0[59]=k*(x+576);
	y0[59]=k*(y+661);
	
	x0[60]=k*(x+580);
	y0[60]=k*(y+656);
	
	x0[61]=k*(x+589);
	y0[61]=k*(y+652);
	
	x0[62]=k*(x+596);
	y0[62]=k*(y+650);
	
	x0[63]=k*(x+602);
	y0[63]=k*(y+655);
	
	x0[64]=k*(x+611);
	y0[64]=k*(y+671);
	
	x0[65]=k*(x+613);
	y0[65]=k*(y+677);
	 	
	//把初始顶点复原
	for(i=0;i<66;i++)
	{
	 	x0[i]=x0[i]-(x+1)*(k-1);
		y0[i]=y0[i]-(y+343)*(k-1);
	}	
		
	Bezier(color,66,page,x0,y0,0);		
		
}
