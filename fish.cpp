#include<huatu1.h>
#include<Bezier.h>
#include<draw.h>
#include<stdio.h>
#include<string.h>
#include<alloc.h>
#include<stdlib.h>
#include<color.h>
#include<graphics.h>
#include<stdarg.h>
#include<conio.h>
#include<Bezier.h>
#include<xiezi.h>
#include<dos.h>
#include<stddef.h>
#include<mouse.h>



void fish(int x,int y,float k,int color,int page,int j)
{
	int x0[103];
	int y0[103];
	int i;
	x=x-497;
	y=y-411;
	int h=(k*(x+540)-(x+497)*(k-1))*2;
	x0[0]=k*(x+497);
	y0[0]=k*(y+411);
	
	x0[1]=k*(x+508);
	y0[1]=k*(y+425);
	
	x0[2]=k*(x+511);
	y0[2]=k*(y+436);
	
	x0[3]=k*(x+513);
	y0[3]=k*(y+441);
	
	x0[4]=k*(x+515);
	y0[4]=k*(y+451);
	
	x0[5]=k*(x+516);
	y0[5]=k*(y+452);	
	
	x0[6]=k*(x+515);
	y0[6]=k*(y+451);
	
	x0[7]=k*(x+518);
	y0[7]=k*(y+453);
	
	x0[8]=k*(x+515);
	y0[8]=k*(y+451);	
	
	x0[9]=k*(x+514);
	y0[9]=k*(y+454);
	
	x0[10]=k*(x+513);
	y0[10]=k*(y+456);
	
	x0[11]=k*(x+513);
	y0[11]=k*(y+460);
	
	x0[12]=k*(x+508);
	y0[12]=k*(y+466);
	
	x0[13]=k*(x+507);
	y0[13]=k*(y+468);
	
	x0[14]=k*(x+503);
	y0[14]=k*(y+471);
	
	x0[15]=k*(x+499);
	y0[15]=k*(y+475);
	
	x0[16]=k*(x+494);
	y0[16]=k*(y+481);
	
	x0[17]=k*(x+501);
	y0[17]=k*(y+481);
	
	x0[18]=k*(x+506);
	y0[18]=k*(y+482);
	
	x0[19]=k*(x+513);
	y0[19]=k*(y+482);
	
	x0[20]=k*(x+517);
	y0[20]=k*(y+483);
	
	x0[21]=k*(x+521);
	y0[21]=k*(y+485);
	
	x0[22]=k*(x+528);
	y0[22]=k*(y+486);
	
	x0[23]=k*(x+538);
	y0[23]=k*(y+488);
	
	x0[24]=k*(x+546);
	y0[24]=k*(y+489);
	
	x0[25]=k*(x+558);
	y0[25]=k*(y+487);
	
	x0[26]=k*(x+574);
	y0[26]=k*(y+486);
	
	x0[27]=k*(x+576);
	y0[27]=k*(y+483);
	
	x0[28]=k*(x+581);
	y0[28]=k*(y+479);
	
	x0[29]=k*(x+585);
	y0[29]=k*(y+475);
	
	x0[30]=k*(x+589);
	y0[30]=k*(y+473);
	
	x0[31]=k*(x+593);
	y0[31]=k*(y+471);
	
	x0[32]=k*(x+595);
	y0[32]=k*(y+468);
	
	x0[33]=k*(x+597);
	y0[33]=k*(y+463);
	
	x0[34]=k*(x+599);
	y0[34]=k*(y+461);
	
	x0[35]=k*(x+600);
	y0[35]=k*(y+457);
	
	x0[36]=k*(x+601);
	y0[36]=k*(y+455);
	
	x0[37]=k*(x+602);
	y0[37]=k*(y+452);
	
	x0[38]=k*(x+604);
	y0[38]=k*(y+456);
	
	x0[39]=k*(x+608);
	y0[39]=k*(y+461);	

	x0[40]=k*(x+610);
	y0[40]=k*(y+464);

	x0[41]=k*(x+609);
	y0[41]=k*(y+468);

	x0[42]=k*(x+611);
	y0[42]=k*(y+472);

	x0[43]=k*(x+614);
	y0[43]=k*(y+474);

	x0[44]=k*(x+617);
	y0[44]=k*(y+477);

	x0[45]=k*(x+620);
	y0[45]=k*(y+479);

	x0[46]=k*(x+623);
	y0[46]=k*(y+480);

	x0[47]=k*(x+623);
	y0[47]=k*(y+479);

	x0[48]=k*(x+623);
	y0[48]=k*(y+478);

	x0[49]=k*(x+623);
	y0[49]=k*(y+477);

	x0[50]=k*(x+623);
	y0[50]=k*(y+476);

	x0[51]=k*(x+623);
	y0[51]=k*(y+475);

	x0[52]=k*(x+623);
	y0[52]=k*(y+474);

	x0[53]=k*(x+623);
	y0[53]=k*(y+473);

	x0[54]=k*(x+623);
	y0[54]=k*(y+472);

	x0[55]=k*(x+623);
	y0[55]=k*(y+445);

	x0[56]=k*(x+623);
	y0[56]=k*(y+427);

	x0[57]=k*(x+623);
	y0[57]=k*(y+422);

	x0[58]=k*(x+623);
	y0[58]=k*(y+421);

	x0[59]=k*(x+623);
	y0[59]=k*(y+420);

	x0[60]=k*(x+623);
	y0[60]=k*(y+419);

	x0[61]=k*(x+623);
	y0[61]=k*(y+418);

	x0[62]=k*(x+623);
	y0[62]=k*(y+417);

	x0[63]=k*(x+623);
	y0[63]=k*(y+416);

	x0[64]=k*(x+623);
	y0[64]=k*(y+415);

	x0[65]=k*(x+623);
	y0[65]=k*(y+414);

	x0[66]=k*(x+623);
	y0[66]=k*(y+413);

	x0[67]=k*(x+623);
	y0[67]=k*(y+412);

	x0[68]=k*(x+623);
	y0[68]=k*(y+411);

	x0[69]=k*(x+623);
	y0[69]=k*(y+410);

	x0[70]=k*(x+621);
	y0[70]=k*(y+411);

	x0[71]=k*(x+618);
	y0[71]=k*(y+416);

	x0[72]=k*(x+616);
	y0[72]=k*(y+420);

	x0[73]=k*(x+615);
	y0[73]=k*(y+424);

	x0[74]=k*(x+612);
	y0[74]=k*(y+426);

	x0[75]=k*(x+610);
	y0[75]=k*(y+430);

	x0[76]=k*(x+608);
	y0[76]=k*(y+435);

	x0[77]=k*(x+604);
	y0[77]=k*(y+437);

	x0[78]=k*(x+603);
	y0[78]=k*(y+441);

	x0[79]=k*(x+601);
	y0[79]=k*(y+442);

	x0[80]=k*(x+599);
	y0[80]=k*(y+440);


	x0[81]=k*(x+593);
	y0[81]=k*(y+426);
	
	x0[82]=k*(x+592);
	y0[82]=k*(y+423);
	
	x0[83]=k*(x+590);
	y0[83]=k*(y+419);
	
	x0[84]=k*(x+588);
	y0[84]=k*(y+415);
	
	x0[85]=k*(x+586);
	y0[85]=k*(y+411);
	
	x0[86]=k*(x+583);
	y0[86]=k*(y+409);	
	
	x0[87]=k*(x+577);
	y0[87]=k*(y+404);
	
	x0[88]=k*(x+571);
	y0[88]=k*(y+402);
	
	x0[89]=k*(x+564);
	y0[89]=k*(y+402);
	
	x0[90]=k*(x+554);
	y0[90]=k*(y+397);
	
	x0[91]=k*(x+545);
	y0[91]=k*(y+399);
	
	x0[92]=k*(x+528);
	y0[92]=k*(y+394);
	
	x0[93]=k*(x+530);
	y0[93]=k*(y+401);
	
	x0[94]=k*(x+515);
	y0[94]=k*(y+404);
	
	x0[95]=k*(x+514);
	y0[95]=k*(y+405);
	
	x0[96]=k*(x+511);
	y0[96]=k*(y+408);
	
	x0[97]=k*(x+509);
	y0[97]=k*(y+409);
	
	x0[98]=k*(x+506);
	y0[98]=k*(y+409);
	
	x0[99]=k*(x+503);
	y0[99]=k*(y+410);
	
	x0[100]=k*(x+501);
	y0[100]=k*(y+410);
	
	x0[101]=k*(x+498);
	y0[101]=k*(y+411);	

	x0[102]=k*(x+497);
	y0[102]=k*(y+411); 
	
	//把初始顶点复原
	for(i=0;i<103;i++)
	{
		x0[i]=x0[i]-(x+497)*(k-1);
		y0[i]=y0[i]-(y+411)*(k-1);
	}
	if(j==0)
	{
	Bezier(color,103,page,x0,y0,0);
	}
	else
	{
	for(i=0;i<103;i++)
	{
		x0[i]=h-x0[i];
		y0[i]=y0[i];
	}		
	Bezier(color,103,page,x0,y0,0);
	}
	//if(j==0)  
	//fill_1(color,page);
}



 
 
 
 
void fish_head(int x,int y,float k,int color,int page,int j)
{
	int x0[42];
	int y0[42];
	int i;
	
	x=x-497;
	y=y-411;
	int h=(k*(x+540)-(x+497)*(k-1))*2;
	
	x0[0]=k*(x+497);
	y0[0]=k*(y+411);
	
	x0[1]=k*(x+493);
	y0[1]=k*(y+411);
	
	x0[2]=k*(x+491);
	y0[2]=k*(y+413);
	
	x0[3]=k*(x+489);
	y0[3]=k*(y+415);
	
	x0[4]=k*(x+486);
	y0[4]=k*(y+416);
	
	x0[5]=k*(x+483);
	y0[5]=k*(y+418);
	
	x0[6]=k*(x+480);
	y0[6]=k*(y+420);
	
	x0[7]=k*(x+479);
	y0[7]=k*(y+421);
	
	x0[8]=k*(x+474);
	y0[8]=k*(y+423);
	
	x0[9]=k*(x+471);
	y0[9]=k*(y+426);
	
	x0[10]=k*(x+468);
	y0[10]=k*(y+428);
	
	x0[11]=k*(x+466);
	y0[11]=k*(y+430);
	
	x0[12]=k*(x+464);
	y0[12]=k*(y+432);
	
	x0[13]=k*(x+462);
	y0[13]=k*(y+434);
	
	x0[14]=k*(x+461);
	y0[14]=k*(y+436);
	
	x0[15]=k*(x+459);
	y0[15]=k*(y+436);
	
	x0[16]=k*(x+458);
	y0[16]=k*(y+437);
	
	x0[17]=k*(x+454);
	y0[17]=k*(y+438);
	
	x0[18]=k*(x+455);
	y0[18]=k*(y+446);
	
	x0[19]=k*(x+456);
	y0[19]=k*(y+446);
	
	x0[20]=k*(x+457);
	y0[20]=k*(y+448);
	
	x0[21]=k*(x+460);
	y0[21]=k*(y+449);
	
	x0[22]=k*(x+463);
	y0[22]=k*(y+453);
	
	x0[23]=k*(x+465);
	y0[23]=k*(y+454);
	
	x0[24]=k*(x+467);
	y0[24]=k*(y+456);
	
	x0[25]=k*(x+468);
	y0[25]=k*(y+457);
	
	x0[26]=k*(x+470);
	y0[26]=k*(y+458);
	
	x0[27]=k*(x+473);
	y0[27]=k*(y+461);
	
	x0[28]=k*(x+475);
	y0[28]=k*(y+462);
	
	x0[29]=k*(x+477);
	y0[29]=k*(y+464);
	
	x0[30]=k*(x+479);
	y0[30]=k*(y+466);
	
	x0[31]=k*(x+482);
	y0[31]=k*(y+467);
	
	x0[32]=k*(x+483);
	y0[32]=k*(y+468);
	
	x0[33]=k*(x+484);
	y0[33]=k*(y+472);
	
	x0[34]=k*(x+488);
	y0[34]=k*(y+473);
	
	x0[35]=k*(x+490);
	y0[35]=k*(y+475);
	
	x0[36]=k*(x+492);
	y0[36]=k*(y+475);
	
	x0[37]=k*(x+493);
	y0[37]=k*(y+476);
	
	x0[38]=k*(x+496);
	y0[38]=k*(y+477);
	
	x0[39]=k*(x+498);
	y0[39]=k*(y+478);
	
	x0[40]=k*(x+501);
	y0[40]=k*(y+479);
	
	x0[41]=k*(x+507);
	y0[41]=k*(y+478);
	
	//把初始顶点复原
	for(i=0;i<42;i++)
	{
		x0[i]=x0[i]-(x+497)*(k-1);
		y0[i]=y0[i]-(y+411)*(k-1);
	}
	if(j==0)	
	Bezier(color,42,page,x0,y0,0);
	else
	{
	for(i=0;i<42;i++)
	{
		x0[i]=h-x0[i];
		y0[i]=y0[i];
	}		
	Bezier(color,42,page,x0,y0,0);
	}
	//fill_1(color,page); 
} 
 
 
void fish_eye(int x,int y,float k,int color,int page,int j)
{
	int i;
	x=x-497;
	y=y-411;
	int h=(k*(x+545)-(x+497)*(k-1))*2;

	x=k*(x+480)-(x+497)*(k-1);
	y=k*(y+440)-(y+411)*(k-1);	
	if(j==0)
	circle_with_drawing(x,y,9*k,color,page,0);
	else
	{
		circle_with_drawing(h-x,y,7*k,color,page,0);
	}
}
 
 
