#include<huatu1.h>
#include<Bezier.h>
#include<draw.h>
#include<stdio.h>
#include<string.h>
#include<alloc.h>
#include<stdlib.h>
#include<color.h>
#include<graphics.h>
#include<stdarg.h>
#include<conio.h>
#include<Bezier.h>
#include<xiezi.h>
#include<dos.h>
#include<stddef.h>
#include<mouse.h>
#include<dog.h>
#include<boy.h>
 
 //上：k*(y+350)-(y+353)*(k-1)
 //下：k*(y+689)-(y+353)*(k-1)
 //左：k*(x+442)-(x+524)*(k-1)
 //右：k*(x+585)-(x+524)*(k-1)


//原点为（524，353） 

//画男生的头发 
void boy_hair(int x,int y,float k,int color,int page)
{
	int x0[29];
	int y0[29];
	
	int x1[58];
	int y1[58];
	
	int x2[20];
	int y2[20];
	
	int i;
	x=x-524;
	y=y-353;
	
	x0[0]=k*(x+524);
	y0[0]=k*(y+353);
	
	x0[1]=k*(x+520);
	y0[1]=k*(y+357);
	
	x0[2]=k*(x+519);
	y0[2]=k*(y+360);
	
	x0[3]=k*(x+516);
	y0[3]=k*(y+363);
	
	x0[4]=k*(x+513);
	y0[4]=k*(y+367);
	
	x0[5]=k*(x+511);
	y0[5]=k*(y+369);
	
	x0[6]=k*(x+509);
	y0[6]=k*(y+372);
	
	x0[7]=k*(x+503);
	y0[7]=k*(y+375);
	
	x0[8]=k*(x+501);
	y0[8]=k*(y+377);
	
	x0[9]=k*(x+498);
	y0[9]=k*(y+379);
	
	x0[10]=k*(x+494);
	y0[10]=k*(y+380);
	
	x0[11]=k*(x+491);
	y0[11]=k*(y+381);
	
	x0[12]=k*(x+489);
	y0[12]=k*(y+381);
	
	x0[13]=k*(x+486);
	y0[13]=k*(y+381);
	
	x0[14]=k*(x+479);
	y0[14]=k*(y+381);
	
	x0[15]=k*(x+476);
	y0[15]=k*(y+381);
	
	x0[16]=k*(x+472);
	y0[16]=k*(y+381);
	
	x0[17]=k*(x+468);
	y0[17]=k*(y+380);
	
	x0[18]=k*(x+467);
	y0[18]=k*(y+379);
	
	x0[19]=k*(x+464);
	y0[19]=k*(y+379);
	
	x0[20]=k*(x+462);
	y0[20]=k*(y+378);
	
	x0[21]=k*(x+459);
	y0[21]=k*(y+378);
	
	x0[22]=k*(x+455);
	y0[22]=k*(y+377);
	
	x0[23]=k*(x+452);
	y0[23]=k*(y+377);
	
	x0[24]=k*(x+448);
	y0[24]=k*(y+376);
	
	x0[25]=k*(x+447);
	y0[25]=k*(y+373);
	
	x0[26]=k*(x+445);
	y0[26]=k*(y+370);
	
	x0[27]=k*(x+443);
	y0[27]=k*(y+367);
	
	x0[28]=k*(x+443);
	y0[28]=k*(y+363);
	
	x1[0]=k*(x+444);
	y1[0]=k*(y+360);
	
	x1[1]=k*(x+445);
	y1[1]=k*(y+357);
	
	x1[2]=k*(x+446);
	y1[2]=k*(y+353);
	
	x1[3]=k*(x+449);
	y1[3]=k*(y+349);
	
	x1[4]=k*(x+452);
	y1[4]=k*(y+346);
	
	x1[5]=k*(x+453);
	y1[5]=k*(y+343);
	
	x1[6]=k*(x+454);
	y1[6]=k*(y+341);
	
	x1[7]=k*(x+455);
	y1[7]=k*(y+338);
	
	x1[8]=k*(x+458);
	y1[8]=k*(y+335);
	
	x1[9]=k*(x+460);
	y1[9]=k*(y+332);
	
	x1[10]=k*(x+462);
	y1[10]=k*(y+329);
	
	x1[11]=k*(x+465);
	y1[11]=k*(y+323);
	
	x1[12]=k*(x+467);
	y1[12]=k*(y+321);
	
	x1[13]=k*(x+468);
	y1[13]=k*(y+321);
	
	x1[14]=k*(x+470);
	y1[14]=k*(y+321);
	
	x1[15]=k*(x+472);
	y1[15]=k*(y+319);	
	
	x1[16]=k*(x+475);
	y1[16]=k*(y+318);
	
	x1[17]=k*(x+479);
	y1[17]=k*(y+317);
	
	x1[18]=k*(x+481);
	y1[18]=k*(y+318);
	
	x1[19]=k*(x+486);
	y1[19]=k*(y+318);
	
	x1[20]=k*(x+490);
	y1[20]=k*(y+317);
	
	x1[21]=k*(x+494);
	y1[21]=k*(y+316);
	
	x1[22]=k*(x+500);
	y1[22]=k*(y+315);
	
	x1[23]=k*(x+504);
	y1[23]=k*(y+315);
	
	x1[24]=k*(x+507);
	y1[24]=k*(y+315);
	
	x1[25]=k*(x+510);
	y1[25]=k*(y+314);
	
	x1[26]=k*(x+512);
	y1[26]=k*(y+313);
	
	x1[27]=k*(x+515);
	y1[27]=k*(y+311);
	
	x1[28]=k*(x+517);
	y1[28]=k*(y+310);
	
	x1[29]=k*(x+519);
	y1[29]=k*(y+309);
	
	x1[30]=k*(x+521);
	y1[30]=k*(y+309);
	
	x1[31]=k*(x+523);
	y1[31]=k*(y+309);
	
	x1[32]=k*(x+525);
	y1[32]=k*(y+309);
	
	x1[33]=k*(x+525);
	y1[33]=k*(y+310);
	
	x1[34]=k*(x+525);
	y1[34]=k*(y+311);
	
	x1[35]=k*(x+525);
	y1[35]=k*(y+313);
	
	x1[36]=k*(x+525);
	y1[36]=k*(y+315);
	
	x1[37]=k*(x+530);
	y1[37]=k*(y+315);
	
	x1[38]=k*(x+532);
	y1[38]=k*(y+316);
	
	x1[39]=k*(x+536);
	y1[39]=k*(y+315);
	
	x1[40]=k*(x+542);
	y1[40]=k*(y+317);
	
	x1[41]=k*(x+549);
	y1[41]=k*(y+318);
	
	x1[42]=k*(x+554);
	y1[42]=k*(y+319);
	
	x1[43]=k*(x+558);
	y1[43]=k*(y+320);
	
	x1[44]=k*(x+562);
	y1[44]=k*(y+321);
	
	x1[45]=k*(x+567);
	y1[45]=k*(y+324);
	
	x1[46]=k*(x+569);
	y1[46]=k*(y+325);
	
	x1[47]=k*(x+572);
	y1[47]=k*(y+326);
	
	x1[48]=k*(x+576);
	y1[48]=k*(y+329);
	
	x1[49]=k*(x+582);
	y1[49]=k*(y+333);
	
	x1[50]=k*(x+586);
	y1[50]=k*(y+336);
	
	x1[51]=k*(x+590);
	y1[51]=k*(y+343);
	
	x1[52]=k*(x+590);
	y1[52]=k*(y+348);
	
	x1[53]=k*(x+593);
	y1[53]=k*(y+354);
	
	x1[54]=k*(x+595);
	y1[54]=k*(y+364);
	
	x1[55]=k*(x+596);
	y1[55]=k*(y+370);
	
	x1[56]=k*(x+597);
	y1[56]=k*(y+374);
	
	x1[57]=k*(x+596);
	y1[57]=k*(y+377);
	
	x2[0]=k*(x+593);
	y2[0]=k*(y+377);
	
	x2[1]=k*(x+591);
	y2[1]=k*(y+377);
	
	x2[3]=k*(x+589);
	y2[3]=k*(y+377);
	
	x2[2]=k*(x+588);
	y2[2]=k*(y+376);
	
	x2[4]=k*(x+581);
	y2[4]=k*(y+371);
	
	x2[5]=k*(x+578);
	y2[5]=k*(y+370);
	
	x2[6]=k*(x+574);
	y2[6]=k*(y+369);
	
	x2[7]=k*(x+565);
	y2[7]=k*(y+366);
	
	x2[8]=k*(x+561);
	y2[8]=k*(y+363);
	
	x2[9]=k*(x+554);
	y2[9]=k*(y+354);
	
	x2[10]=k*(x+549);
	y2[10]=k*(y+350);
	
	x2[11]=k*(x+546);
	y2[11]=k*(y+350);
	
	x2[12]=k*(x+544);
	y2[12]=k*(y+354);
	
	x2[13]=k*(x+542);
	y2[13]=k*(y+356);
	
	x2[14]=k*(x+541);
	y2[14]=k*(y+362);
	
	x2[15]=k*(x+539);
	y2[15]=k*(y+362);
	
	x2[16]=k*(x+534);
	y2[16]=k*(y+367);
	
	x2[17]=k*(x+530);
	y2[17]=k*(y+366);
	
	x2[18]=k*(x+527);
	y2[18]=k*(y+364);
	
	x2[19]=k*(x+524);
	y2[19]=k*(y+353);	
				
 	//把初始顶点复原
 	for(i=0;i<29;i++)
 	{
 		x0[i]=x0[i]-(x+524)*(k-1);
 		y0[i]=y0[i]-(y+353)*(k-1);
 	}	
 	
 	for(i=0;i<58;i++)
 	{
 		x1[i]=x1[i]-(x+524)*(k-1);
 		y1[i]=y1[i]-(y+353)*(k-1);
 	}	

 	for(i=0;i<20;i++)
 	{
 		x2[i]=x2[i]-(x+524)*(k-1);
 		y2[i]=y2[i]-(y+353)*(k-1);
 	}	

	Bezier(color,29,page,x0,y0,0);
	Bezier(color,58,page,x1,y1,0);
	Bezier(color,20,page,x2,y2,0);
}




//此处原点还是（524，353） 
void boy_face(int x,int y,float k,int color,int page)
{
	int x0[25];
	int y0[25];
	
	int x1[44];
	int y1[44];
	
	int x2[19];
	int y2[19];
	
	int i=0;

	x=x-524;
	y=y-353;
	
	//开始画左耳朵 
	x0[0]=k*(x+444);
	y0[0]=k*(y+364);
	
	x0[1]=k*(x+438);
	y0[1]=k*(y+370);
	
	x0[2]=k*(x+437);
	y0[2]=k*(y+378);
	
	x0[3]=k*(x+437);
	y0[3]=k*(y+382);
	
	x0[4]=k*(x+436);
	y0[4]=k*(y+385);
	
	x0[5]=k*(x+436);
	y0[5]=k*(y+387);
	
	x0[6]=k*(x+436);
	y0[6]=k*(y+390);
	
	x0[7]=k*(x+434);
	y0[7]=k*(y+387);
	
	x0[8]=k*(x+433);
	y0[8]=k*(y+430);
	
	x0[9]=k*(x+428);
	y0[9]=k*(y+383);
	
	x0[10]=k*(x+425);
	y0[10]=k*(y+383);
	
	x0[11]=k*(x+422);
	y0[11]=k*(y+385);
	
	x0[12]=k*(x+421);
	y0[12]=k*(y+392);
	
	x0[13]=k*(x+419);
	y0[13]=k*(y+392);
	
	x0[14]=k*(x+419);
	y0[14]=k*(y+396);
	
	x0[15]=k*(x+419);
	y0[15]=k*(y+399);
	
	x0[16]=k*(x+420);
	y0[16]=k*(y+404);
	
	x0[17]=k*(x+423);
	y0[17]=k*(y+407);
	
	x0[18]=k*(x+425);
	y0[18]=k*(y+410);
	
	x0[19]=k*(x+427);
	y0[19]=k*(y+411);
	
	x0[20]=k*(x+432);
	y0[20]=k*(y+413);
	
	x0[21]=k*(x+437);
	y0[21]=k*(y+414);
	
	x0[22]=k*(x+440);
	y0[22]=k*(y+415);
	
	x0[23]=k*(x+444);
	y0[23]=k*(y+414);
	
	x0[24]=k*(x+446);
	y0[24]=k*(y+415);
	
	
	//开始绘画脸下面的圆弧	
	x1[0]=k*(x+446);
	y1[0]=k*(y+415);
	
	x1[1]=k*(x+448);
	y1[1]=k*(y+417);
	
	x1[2]=k*(x+450);
	y1[2]=k*(y+419);
	
	x1[3]=k*(x+451);
	y1[3]=k*(y+421);
	
	x1[4]=k*(x+452);
	y1[4]=k*(y+425);
	
	x1[5]=k*(x+453);
	y1[5]=k*(y+428);
	
	x1[6]=k*(x+454);
	y1[6]=k*(y+431);
	
	x1[7]=k*(x+455);
	y1[7]=k*(y+434);
	
	x1[8]=k*(x+457);
	y1[8]=k*(y+438);
	
	x1[9]=k*(x+458);
	y1[9]=k*(y+440);
	
	x1[10]=k*(x+461);
	y1[10]=k*(y+444);
	
	x1[11]=k*(x+465);
	y1[11]=k*(y+447);
	
	x1[12]=k*(x+467);
	y1[12]=k*(y+453);
	
	x1[13]=k*(x+470);
	y1[13]=k*(y+454);
	
	x1[14]=k*(x+474);
	y1[14]=k*(y+456);
	
	x1[15]=k*(x+479);
	y1[15]=k*(y+458);
	
	x1[16]=k*(x+485);
	y1[16]=k*(y+460);
	
	x1[17]=k*(x+489);
	y1[17]=k*(y+462);
	
	x1[18]=k*(x+494);
	y1[18]=k*(y+462);
	
	x1[19]=k*(x+497);
	y1[19]=k*(y+462);
	
	x1[20]=k*(x+501);
	y1[20]=k*(y+464);
	
	x1[21]=k*(x+505);
	y1[21]=k*(y+465);
	
	x1[22]=k*(x+510);
	y1[22]=k*(y+465);
	
	x1[23]=k*(x+516);
	y1[23]=k*(y+466);
	
	x1[24]=k*(x+520);
	y1[24]=k*(y+467);
	
	x1[25]=k*(x+523);
	y1[25]=k*(y+467);
	
	x1[26]=k*(x+526);
	y1[26]=k*(y+465);
	
	x1[27]=k*(x+531);
	y1[27]=k*(y+461);
	
	x1[28]=k*(x+536);
	y1[28]=k*(y+459);
	
	x1[29]=k*(x+540);
	y1[29]=k*(y+458);
	
	x1[30]=k*(x+543);
	y1[30]=k*(y+457);
	
	x1[31]=k*(x+547);
	y1[31]=k*(y+455);
	
	x1[32]=k*(x+553);
	y1[32]=k*(y+450);
	
	x1[33]=k*(x+556);
	y1[33]=k*(y+449);
	
	x1[34]=k*(x+560);
	y1[34]=k*(y+447);
	
	x1[35]=k*(x+564);
	y1[35]=k*(y+445);
	
	x1[36]=k*(x+571);
	y1[36]=k*(y+442);
	
	x1[37]=k*(x+574);
	y1[37]=k*(y+439);
	
	x1[38]=k*(x+577);
	y1[38]=k*(y+435);
	
	x1[39]=k*(x+583);
	y1[39]=k*(y+430);
	
	x1[40]=k*(x+583);
	y1[40]=k*(y+423);
	
	x1[41]=k*(x+584);
	y1[41]=k*(y+420);
	
	x1[42]=k*(x+584);
	y1[42]=k*(y+417);
	
	x1[43]=k*(x+585);
	y1[43]=k*(y+408);
	
	//开始画右耳朵
	x2[0]=k*(x+585);
	y2[0]=k*(y+408);
	
	x2[1]=k*(x+587);
	y2[1]=k*(y+411);
	
	x2[2]=k*(x+590);
	y2[2]=k*(y+410);
	
	x2[3]=k*(x+593);
	y2[3]=k*(y+409);
	
	x2[4]=k*(x+597);
	y2[4]=k*(y+406);
	
	x2[5]=k*(x+599);
	y2[5]=k*(y+406);
	
	x2[6]=k*(x+602);
	y2[6]=k*(y+401);
	
	x2[7]=k*(x+604);
	y2[7]=k*(y+397);
	
	x2[8]=k*(x+605);
	y2[8]=k*(y+393);
	
	x2[9]=k*(x+605);
	y2[9]=k*(y+390);
	
	x2[10]=k*(x+604);
	y2[10]=k*(y+387);
	
	x2[11]=k*(x+603);
	y2[11]=k*(y+383);
	
	x2[12]=k*(x+601);
	y2[12]=k*(y+382);
	
	x2[13]=k*(x+598);
	y2[13]=k*(y+386);
	
	x2[14]=k*(x+596);
	y2[14]=k*(y+388);
	
	x2[15]=k*(x+594);
	y2[15]=k*(y+386);
	
	x2[16]=k*(x+595);
	y2[16]=k*(y+381);
	
	x2[17]=k*(x+595);
	y2[17]=k*(y+378);
	
	x2[18]=k*(x+596);
	y2[18]=k*(y+376);
	
	//把放缩后的顶点复原 
	for(i=0;i<25;i++)
	{
	 	x0[i]=x0[i]-(x+524)*(k-1);
	 	y0[i]=y0[i]-(y+353)*(k-1);
	}		
	
	//把放缩后的顶点复原 
	for(i=0;i<44;i++)
	{
	 	x1[i]=x1[i]-(x+524)*(k-1);
	 	y1[i]=y1[i]-(y+353)*(k-1);
	}		
	
	//把放缩后的顶点复原 
	for(i=0;i<19;i++)
	{
	 	x2[i]=x2[i]-(x+524)*(k-1);
	 	y2[i]=y2[i]-(y+353)*(k-1);
	}	
	
	Bezier(color,25,page,x0,y0,0);
	Bezier(color,44,page,x1,y1,0);
	Bezier(color,19,page,x2,y2,0);
}


//原点与前面不发生改变（524，353） 
void boy_eye(int x,int y,float k,int color,int page)
{
	int x0[28];
	int y0[28];
	
	int x1[31];
	int y1[31];
	
	int i=0;//用于后续循环 
	
	x=x-524;
	y=y-353; 
	
	x0[0]=k*(x+489);
	y0[0]=k*(y+392);
	
	x0[1]=k*(x+491);
	y0[1]=k*(y+392);
	
	x0[2]=k*(x+493);
	y0[2]=k*(y+392);
	
	x0[3]=k*(x+496);
	y0[3]=k*(y+391);
	
	x0[4]=k*(x+497);
	y0[4]=k*(y+393);
	
	x0[5]=k*(x+499);
	y0[5]=k*(y+394);
	
	x0[6]=k*(x+500);
	y0[6]=k*(y+395);
	
	x0[7]=k*(x+501);
	y0[7]=k*(y+397);
	
	x0[8]=k*(x+500);
	y0[8]=k*(y+401);
	
	x0[9]=k*(x+499);
	y0[9]=k*(y+403);
	
	x0[10]=k*(x+496);
	y0[10]=k*(y+405);
	
	x0[11]=k*(x+494);
	y0[11]=k*(y+406);
	
	x0[12]=k*(x+490);
	y0[12]=k*(y+407);
	
	x0[13]=k*(x+488);
	y0[13]=k*(y+406);
	
	x0[14]=k*(x+484);
	y0[14]=k*(y+406);
	
	x0[15]=k*(x+482);
	y0[15]=k*(y+407);
	
	x0[16]=k*(x+480);
	y0[16]=k*(y+405);
	
	x0[17]=k*(x+479);
	y0[17]=k*(y+404);
	
	x0[18]=k*(x+477);
	y0[18]=k*(y+402);
	
	x0[19]=k*(x+477);
	y0[19]=k*(y+400);
	
	x0[20]=k*(x+476);
	y0[20]=k*(y+398);
	
	x0[21]=k*(x+477);
	y0[21]=k*(y+395);
	
	x0[22]=k*(x+478);
	y0[22]=k*(y+394);
	
	x0[23]=k*(x+479);
	y0[23]=k*(y+393);
	
	x0[24]=k*(x+482);
	y0[24]=k*(y+393); 
	
	x0[25]=k*(x+485);
	y0[25]=k*(y+392);
	
	x0[26]=k*(x+486);
	y0[26]=k*(y+392);
	
	x0[27]=k*(x+489);
	y0[27]=k*(y+392);
	
	
	//开始画右面的眼睛 
	x1[0]=k*(x+544);
	y1[0]=k*(y+393);
	
	x1[1]=k*(x+542);
	y1[1]=k*(y+393);
	
	for(i=0;i<5;i++)
	{
		x1[2+i]=k*(x+543+i);
		y1[2+i]=k*(y+393);
	} 
	
	x1[7]=k*(x+548);
	y1[7]=k*(y+394);
	
	x1[8]=k*(x+550);
	y1[8]=k*(y+394);
	
	x1[9]=k*(x+553);
	y1[9]=k*(y+394);
	
	x1[10]=k*(x+555);
	y1[10]=k*(y+396);
	
	x1[11]=k*(x+556);
	y1[11]=k*(y+398);
	
	x1[12]=k*(x+555);
	y1[12]=k*(y+401);
	
	x1[13]=k*(x+551);
	y1[13]=k*(y+405);
	
	x1[14]=k*(x+547);
	y1[14]=k*(y+406);
	
	x1[15]=k*(x+545);
	y1[15]=k*(y+406);
	
	x1[16]=k*(x+542);
	y1[16]=k*(y+407);
	
	
	for(i=0;i<7;i++)
	{
		x1[17+i]=k*(x+541-i);
		y1[17+i]=k*(y+407);
	}
	
	x1[24]=k*(x+533);
	y1[24]=k*(y+402);
	
	x1[25]=k*(x+532);
	y1[25]=k*(y+400);
	
	x1[26]=k*(x+534);
	y1[26]=k*(y+398);
	
	x1[27]=k*(x+536);
	y1[27]=k*(y+393);
	
	x1[28]=k*(x+538);
	y1[28]=k*(y+392);
	
	x1[29]=k*(x+541);
	y1[29]=k*(y+392);
	
	x1[30]=k*(x+544);
	y1[30]=k*(y+393);
	
	
	//把放缩后的顶点复原 
	for(i=0;i<28;i++)
	{
	 	x0[i]=x0[i]-(x+524)*(k-1);
	 	y0[i]=y0[i]-(y+353)*(k-1);
	}		
	
	//把放缩后的顶点复原 
	for(i=0;i<31;i++)
	{
	 	x1[i]=x1[i]-(x+524)*(k-1);
	 	y1[i]=y1[i]-(y+353)*(k-1);
	}	
	
	Bezier(color,28,page,x0,y0,0);
	Bezier(color,31,page,x1,y1,0);
}



void boy_body(int x,int y,float k,int color,int page)
{
	int x0[28];
	int y0[28];
	
	int x1[31];
	int y1[31];
	
	int x2[15];
	int y2[15];
	
	int i=0;//用于后续循环 
	
	x=x-524;
	y=y-353; 
	
	x0[0]=k*(x+482);
	y0[0]=k*(y+488);
	
	x0[1]=k*(x+481);
	y0[1]=k*(y+491);
	
	x0[1]=k*(x+479);
	y0[1]=k*(y+496);
	
	x0[2]=k*(x+477);
	y0[2]=k*(y+497);
	
	x0[3]=k*(x+475);
	y0[3]=k*(y+502);
	
	x0[4]=k*(x+472);
	y0[4]=k*(y+510);
	
	x0[5]=k*(x+471);
	y0[5]=k*(y+519);
	
	x0[6]=k*(x+468);
	y0[6]=k*(y+528);
	
	x0[7]=k*(x+467);
	y0[7]=k*(y+538);
	
	x0[8]=k*(x+465);
	y0[8]=k*(y+543);
	
	x0[9]=k*(x+464);
	y0[9]=k*(y+551);
	
	x0[10]=k*(x+463);
	y0[10]=k*(y+557);
	
	x0[11]=k*(x+463);
	y0[11]=k*(y+569);
	
	x0[12]=k*(x+463);
	y0[12]=k*(y+579);

	//把放缩后的顶点复原 
	for(i=0;i<13;i++)
	{
	 	x0[i]=x0[i]-(x+524)*(k-1);
	 	y0[i]=y0[i]-(y+353)*(k-1);
	}	
	
	Bezier(color,13,page,x0,y0,0);
	
	x1[0]=k*(x+542);
	y1[0]=k*(y+484);
	
	x1[1]=k*(x+547);
	y1[1]=k*(y+495);
	
	x1[2]=k*(x+552);
	y1[2]=k*(y+501);
	
	x1[3]=k*(x+555);
	y1[3]=k*(y+509);
	
	x1[4]=k*(x+558);
	y1[4]=k*(y+516);
	
	x1[5]=k*(x+560);
	y1[5]=k*(y+519);
	
	x1[6]=k*(x+563);
	y1[6]=k*(y+527);
	
	x1[7]=k*(x+565);
	y1[7]=k*(y+537);
	
	x1[8]=k*(x+567);
	y1[8]=k*(y+548);
	
	x1[9]=k*(x+572);
	y1[9]=k*(y+559);
	
	x1[10]=k*(x+575);
	y1[10]=k*(y+569);
	
	x1[11]=k*(x+571);
	y1[11]=k*(y+578);
	
	//把放缩后的顶点复原 
	for(i=0;i<12;i++)
	{
	 	x1[i]=x1[i]-(x+524)*(k-1);
	 	y1[i]=y1[i]-(y+353)*(k-1);
	}		
	Bezier(color,12,page,x1,y1,0);	
	
	x2[0]=k*(x+463);
	y2[0]=k*(y+579);
	
	x2[1]=k*(x+465);
	y2[1]=k*(y+582);
	
	x2[2]=k*(x+472);
	y2[2]=k*(y+585);
	
	x2[3]=k*(x+479);
	y2[3]=k*(y+587);
	
	x2[4]=k*(x+481);
	y2[4]=k*(y+587);
	
	x2[5]=k*(x+486);
	y2[5]=k*(y+591);
	
	x2[6]=k*(x+495);
	y2[6]=k*(y+590);
	
	x2[7]=k*(x+501);
	y2[7]=k*(y+592);
	
	x2[8]=k*(x+510);
	y2[8]=k*(y+592);
	
	x2[9]=k*(x+522);
	y2[9]=k*(y+591);
	
	x2[10]=k*(x+532);
	y2[10]=k*(y+590);
	
	x2[11]=k*(x+541);
	y2[11]=k*(y+588);
	
	x2[12]=k*(x+549);
	y2[12]=k*(y+585);
	
	x2[13]=k*(x+556);
	y2[13]=k*(y+581);
	
	x2[14]=k*(x+571);
	y2[14]=k*(y+578);

	//把放缩后的顶点复原 
	for(i=0;i<15;i++)
	{
	 	x2[i]=x2[i]-(x+524)*(k-1);
	 	y2[i]=y2[i]-(y+353)*(k-1);
	}	
	Bezier(color,15,page,x2,y2,0);	
}

void boy_leg(int x,int y,float k,int color,int page)
{
	
	int i=0;
	
	x=x-524;
	y=y-353; 
		
	//左侧短裤 
	for(i=-2;i<=2;i++)
	{
		line_drawing(k*(x+482)-(x+524)*(k-1),k*(y+589)-(y+353)*(k-1),k*(x+476)-(x+524)*(k-1),k*(y+623)-(y+353)*(k-1),color,page,1);
		line_drawing(k*(x+499)-(x+524)*(k-1),k*(y+622)-(y+353)*(k-1),k*(x+502)-(x+524)*(k-1),k*(y+593)-(y+353)*(k-1),color,page,1);
	}
	for(i=-3;i<3;i++)
	{
		line_drawing(k*(x+476)-(x+524)*(k-1),k*(y+623)-(y+353)*(k-1),k*(x+499)-(x+524)*(k-1),k*(y+622)-(y+353)*(k-1),color,page,1);		
	}
	//右侧短裤 
	for(i=-2;i<=2;i++)
	{
		line_drawing(k*(x+531)-(x+521)*(k-1),k*(y+591)-(y+353)*(k-1),k*(x+533)-(x+524)*(k-1),k*(y+622)-(y+353)*(k-1),color,page,1);
		line_drawing(k*(x+556)-(x+524)*(k-1),k*(y+622)-(y+353)*(k-1),k*(x+548)-(x+524)*(k-1),k*(y+592)-(y+348)*(k-1),color,page,1);
	}
	for(i=-3;i<3;i++)
	{
		line_drawing(k*(x+533)-(x+524)*(k-1),k*(y+622)-(y+353)*(k-1),k*(x+556)-(x+524)*(k-1),k*(y+622)-(y+353)*(k-1),color,page,1);
	}

	//左腿
	for(i=-2;i<=2;i++)
	{
		line_drawing(k*(x+481)-(x+524)*(k-1),k*(y+626)-(y+353)*(k-1),k*(x+472)-(x+524)*(k-1),k*(y+668)-(y+353)*(k-1),color,page,1);
		line_drawing(k*(x+492)-(x+524)*(k-1),k*(y+624)-(y+353)*(k-1),k*(x+487)-(x+524)*(k-1),k*(y+668)-(y+353)*(k-1),color,page,1);
	} 
	//右腿
	for(i=-2;i<=2;i++)
	{
		line_drawing(k*(x+541)-(x+524)*(k-1),k*(y+624)-(y+353)*(k-1),k*(x+543)-(x+524)*(k-1),k*(y+668)-(y+353)*(k-1),color,page,1);
		line_drawing(k*(x+552)-(x+524)*(k-1),k*(y+624)-(y+353)*(k-1),k*(x+554)-(x+524)*(k-1),k*(y+668)-(y+353)*(k-1),color,page,1);
	} 
	
	//左脚
	for(i=-3;i<=3;i++)
	{
		line_drawing(k*(x+487)-(x+524)*(k-1),k*(y+669)-(y+353)*(k-1),k*(x+461)-(x+524)*(k-1),k*(y+669)-(y+353)*(k-1),color,page,1);
		line_drawing(k*(x+461)-(x+524)*(k-1),k*(y+669)-(y+353)*(k-1),k*(x+460)-(x+524)*(k-1),k*(y+682)-(y+353)*(k-1),color,page,1);
		line_drawing(k*(x+460)-(x+524)*(k-1),k*(y+682)-(y+353)*(k-1),k*(x+490)-(x+524)*(k-1),k*(y+682)-(y+353)*(k-1),color,page,1);
		line_drawing(k*(x+490)-(x+524)*(k-1),k*(y+682)-(y+353)*(k-1),k*(x+487)-(x+524)*(k-1),k*(y+669)-(y+353)*(k-1),color,page,1);
	} 
	//右脚
	for(i=-3;i<=3;i++)
	{
		line_drawing(k*(x+538)-(x+524)*(k-1),k*(y+669)-(y+353)*(k-1),k*(x+537)-(x+524)*(k-1),k*(y+682)-(y+353)*(k-1),color,page,1);
		line_drawing(k*(x+537)-(x+524)*(k-1),k*(y+682)-(y+353)*(k-1),k*(x+566)-(x+524)*(k-1),k*(y+682)-(y+353)*(k-1),color,page,1);
		line_drawing(k*(x+566)-(x+524)*(k-1),k*(y+682)-(y+353)*(k-1),k*(x+568)-(x+524)*(k-1),k*(y+669)-(y+353)*(k-1),color,page,1);
		line_drawing(k*(x+568)-(x+524)*(k-1),k*(y+669)-(y+353)*(k-1),k*(x+538)-(x+524)*(k-1),k*(y+669)-(y+353)*(k-1),color,page,1);
	} 
}


void boy_arm(int x,int y,float k,int color,int page)
{
	int i=0;
	int x0[10];
	int y0[10];
	int x1[9];
	int y1[9];
	int x2[10];
	int y2[10];
	
	x=x-524;
	y=y-353; 
	
	//左肩
	x0[0]=k*(x+480);
	y0[0]=k*(y+482);
	
	x0[1]=k*(x+478);
	y0[1]=k*(y+483);
	
	x0[2]=k*(x+476);
	y0[2]=k*(y+485);
	
	x0[3]=k*(x+474);
	y0[3]=k*(y+487);
	
	x0[4]=k*(x+472);
	y0[4]=k*(y+489);
	
	x0[5]=k*(x+471);
	y0[5]=k*(y+492);
	
	x0[6]=k*(x+468);
	y0[6]=k*(y+494);
	
	x0[7]=k*(x+464);
	y0[7]=k*(y+497);
	
	x0[8]=k*(x+462);
	y0[8]=k*(y+499);
	
	x0[9]=k*(x+460);
	y0[9]=k*(y+502);
	
	line_drawing(k*(x+460)-(x+524)*(k-1),k*(y+502)-(y+353)*(k-1),k*(x+476)-(x+524)*(k-1),k*(y+502)-(y+353)*(k-1),color,page,1);	
	line_drawing(k*(x+460)-(x+524)*(k-1),k*(y+503)-(y+353)*(k-1),k*(x+476)-(x+524)*(k-1),k*(y+503)-(y+353)*(k-1),color,page,1);	
	//line_drawing(k*(x+460)-(x+524)*(k-1),k*(y+504)-(y+353)*(k-1),k*(x+480)-(x+524)*(k-1),k*(y+504)-(y+353)*(k-1),color,page,1);	
	
	//右肩
	x1[0]=k*(x+551);
	y1[0]=k*(y+482);
	
	x1[1]=k*(x+554);
	y1[1]=k*(y+483);
	
	x1[2]=k*(x+555);
	y1[2]=k*(y+484);
	
	x1[3]=k*(x+557);
	y1[3]=k*(y+486);
	
	x1[4]=k*(x+559);
	y1[4]=k*(y+488);
	
	x1[5]=k*(x+563);
	y1[5]=k*(y+492);
	
	x1[6]=k*(x+566);
	y1[6]=k*(y+497);
	
	x1[7]=k*(x+568);
	y1[7]=k*(y+501);
	
	x1[8]=k*(x+570);
	y1[8]=k*(y+502);
	
	line_drawing(k*(x+570)-(x+524)*(k-1),k*(y+502)-(y+353)*(k-1),k*(x+554)-(x+524)*(k-1),k*(y+502)-(y+353)*(k-1),color,page,1);
	line_drawing(k*(x+570)-(x+524)*(k-1),k*(y+503)-(y+353)*(k-1),k*(x+554)-(x+524)*(k-1),k*(y+503)-(y+353)*(k-1),color,page,1);
	//line_drawing(k*(x+570)-(x+524)*(k-1),k*(y+504),k*(x+554)-(x+524)*(k-1),k*(y+504),color,page,1);
	
	//把放缩后的顶点复原 
	for(i=0;i<10;i++)
	{
		x0[i]=x0[i]-(x+524)*(k-1);
		y0[i]=y0[i]-(y+353)*(k-1);
	}	
	Bezier(color,10,page,x0,y0,0);	
	
	for(i=0;i<9;i++)
	{
	 	x1[i]=x1[i]-(x+524)*(k-1);
	 	y1[i]=y1[i]-(y+353)*(k-1);
	}	
	Bezier(color,9,page,x1,y1,0);	
	
	//左臂
	line_drawing(k*(x+464)-(x+524)*(k-1),k*(y+505)-(y+353)*(k-1),k*(x+447)-(x+524)*(k-1),k*(y+579)-(y+353)*(k-1),color,page,1);
	line_drawing(k*(x+447)-(x+524)*(k-1),k*(y+579)-(y+353)*(k-1),k*(x+454)-(x+524)*(k-1),k*(y+591)-(y+353)*(k-1),color,page,1);
	line_drawing(k*(x+454)-(x+524)*(k-1),k*(y+591)-(y+353)*(k-1),k*(x+460)-(x+524)*(k-1),k*(y+568)-(y+353)*(k-1),color,page,1); 
	
	line_drawing(k*(x+564)-(x+524)*(k-1),k*(y+505)-(y+353)*(k-1),k*(x+590)-(x+524)*(k-1),k*(y+579)-(y+353)*(k-1),color,page,1);
	line_drawing(k*(x+590)-(x+524)*(k-1),k*(y+579)-(y+353)*(k-1),k*(x+578)-(x+524)*(k-1),k*(y+592)-(y+353)*(k-1),color,page,1);
	line_drawing(k*(x+578)-(x+524)*(k-1),k*(y+592)-(y+353)*(k-1),k*(x+570)-(x+524)*(k-1),k*(y+562)-(y+353)*(k-1),color,page,1);

	//mouth
	x2[0]=k*(x+504);
	y2[0]=k*(y+448);
	
	x2[1]=k*(x+509);
	y2[1]=k*(y+453);
	
	x2[2]=k*(x+512);
	y2[2]=k*(y+456);
	
	x2[3]=k*(x+516);
	y2[3]=k*(y+456);
	
	x2[4]=k*(x+517);
	y2[4]=k*(y+456);
	
	x2[5]=k*(x+518);
	y2[5]=k*(y+457);
	
	x2[6]=k*(x+512);
	y2[6]=k*(y+456);
	
	x2[7]=k*(x+522);
	y2[7]=k*(y+456);
	
	x2[8]=k*(x+526);
	y2[8]=k*(y+453);
	
	x2[9]=k*(x+530);
	y2[9]=k*(y+451);
	
	//把放缩后的顶点复原 
	for(i=0;i<10;i++)
	{
		x2[i]=x2[i]-(x+524)*(k-1);
		y2[i]=y2[i]-(y+353)*(k-1);
	}	
	Bezier(color,10,page,x2,y2,0);
}	

void boy(int x,int y,float k,int color,int page)
{
	boy_face(x,y,k,color,page);
	boy_hair(x,y,k,color,page);
	boy_eye(x,y,k,color,page);
	boy_body(x,y-20,k,color,page);
	boy_leg(x,y-20,k,color,page);
	boy_arm(x,y-20,k,color,page);
}

